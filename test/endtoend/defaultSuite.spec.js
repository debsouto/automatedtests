// Generated by Selenium IDE
const { Builder, By, Key, until } = require('selenium-webdriver')
const assert = require('assert')

describe('Default Suite', function() {
  this.timeout(50000)
  let driver
  let vars
  beforeEach(async function() {
    driver = await new Builder().forBrowser('chrome').build()
    vars = {}
      await driver.get("http://automationpractice.com/index.php")
      await driver.manage().window().setRect({ width: 1280, height: 775 })
      await driver.findElement(By.linkText("Sign in")).click()
      await driver.findElement(By.id("email")).click()
      await driver.findElement(By.id("email")).sendKeys("algumacoisa@algumacoisa.com")
      await driver.findElement(By.id("passwd")).click()
      await driver.findElement(By.id("passwd")).sendKeys("SAPEBA85")
      await driver.findElement(By.css("#SubmitLogin > span")).click()
  })
  afterEach(async function() {
    await driver.quit();
  })
  // it('Registration', async function() {
  //   await driver.get("http://automationpractice.com/index.php")
  //   await driver.manage().window().setRect({ width: 1280, height: 775 })
  //   await driver.findElement(By.linkText("Sign in")).click()
  //   await driver.findElement(By.id("email_create")).click()
  //   await driver.findElement(By.id("email_create")).sendKeys("algumacoisa@algumacoisa.com")
  //   await driver.findElement(By.css("#SubmitCreate > span")).click()
  //   await driver.findElement(By.id("id_gender2")).click()
  //   await driver.findElement(By.id("customer_firstname")).click()
  //   await driver.findElement(By.id("customer_firstname")).sendKeys("DEBORA")
  //   await driver.findElement(By.id("customer_lastname")).click()
  //   await driver.findElement(By.id("customer_lastname")).sendKeys("SOUTO")
  //   await driver.findElement(By.id("passwd")).click()
  //   await driver.findElement(By.id("passwd")).sendKeys("SAPEBA85")
  //   await driver.findElement(By.id("address1")).click()
  //   await driver.findElement(By.id("address1")).sendKeys("Rua da Alegria")
  //   await driver.findElement(By.id("city")).click()
  //   await driver.findElement(By.id("city")).sendKeys("Porto")
  //   await driver.findElement(By.id("id_state")).click()
  //   {
  //     const dropdown = await driver.findElement(By.id("id_state"))
  //     await dropdown.findElement(By.xpath("//option[. = 'California']")).click()
  //   }
  //   await driver.findElement(By.id("postcode")).click()
  //   await driver.findElement(By.id("postcode")).sendKeys("44001")
  //   await driver.findElement(By.id("id_country")).click()
  //   await driver.findElement(By.id("phone_mobile")).click()
  //   await driver.findElement(By.id("phone_mobile")).sendKeys("90909090")
  //   await driver.findElement(By.css("#submitAccount > span")).click()
  //   assert(await driver.getTitle() == "My account - My Store")
  //   await driver.findElement(By.css(".page-heading")).click()
  // })
 
  it('Shopping with an account', async function() {
    await driver.get("http://automationpractice.com/index.php")
    await driver.manage().window().setRect({ width: 1280, height: 775 })
    {
      const element = await driver.findElement(By.xpath("/html/body/div/div[2]/div/div[2]/div/div[1]/ul[1]/li[1]/div/div[1]/div/a[1]"))
      await driver.actions({ bridge: true }).move(element).perform()
    }
    await driver.wait(until.elementLocated(By.xpath("//*[@id=\"homefeatured\"]/li[1]/div/div[2]/div[2]/a[1]")), 10000);
    await driver.findElement(By.global.css("5688")).click()
    assert(await driver.findElement(By.css("h2:nth-child(2)")).getText() == "Product successfully added to your shopping cart")
    await driver.findElement(By.css(".button-medium > span")).click()
    assert(await driver.findElement(By.css(".label")).getText() == "In stock")
    {
      const element = await driver.findElement(By.name("quantity_1_1_0_757290"))
      assert(await element.isEnabled())
    }
    await driver.findElement(By.css(".standard-checkout > span")).click()
    await driver.findElement(By.id("id_address_delivery")).click()
    {
      const elements = await driver.findElements(By.name("message"))
      assert(elements.length)
    }
    await driver.findElement(By.css(".button:nth-child(4) > span")).click()
    await driver.findElement(By.id("cgv")).click()
    assert(await driver.findElement(By.id("cgv")).isSelected())
    {
      const element = await driver.findElement(By.id("uniform-cgv"))
      assert(await element.isChecked())
    }
    await driver.findElement(By.css(".standard-checkout > span")).click()
    {
      const elements = await driver.findElements(By.linkText("Pay by bank wire (order processing will be longer)"))
      assert(elements.length)
    }
    {
      const elements = await driver.findElements(By.linkText("Pay by check (order processing will be longer)"))
      assert(elements.length)
    }
    await driver.findElement(By.linkText("Pay by bank wire (order processing will be longer)")).click()
    assert(await driver.findElement(By.css(".page-subheading")).getText() == "BANK-WIRE PAYMENT.")
    await driver.findElement(By.css("#cart_navigation span")).click()
    assert(await driver.getTitle() == "Order confirmation - My Store")
  })
  // it('Shopping without an account', async function() {
  //   await driver.get("http://automationpractice.com/index.php")
  //   await driver.manage().window().setRect({ width: 1280, height: 775 })
  //   await driver.findElement(By.css("#homefeatured > .ajax_block_product:nth-child(1) .button:nth-child(1) > span")).click()
  //   await driver.findElement(By.css(".button-medium > span")).click()
  //   await driver.findElement(By.css("#cart_quantity_up_1_1_0_0 > span")).click()
  //   await driver.findElement(By.css(".standard-checkout > span")).click()
  //   assert(await driver.getTitle() == "Login - My Store")
  // })
})
